<?xml version="1.0" encoding="UTF-8"?>
<syntax name="docker">
	<meta>
		<name>Dockerfile</name>
		<type>structured</type>
		<preferred-file-extension></preferred-file-extension>
	</meta>
	
	<detectors>
		<filename priority="1.0">Dockerfile</filename>
		<filename priority="1.0">dockerfile</filename>
		<filename priority="1.0">Containerfile</filename>
		<filename priority="1.0">containerfile</filename>
	</detectors>
	
	<comments>
		<single>
			<expression>#</expression>
		</single>
	</comments>
    
    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
        <pair open="`" close="`" />
    </surrounding-pairs>
	
	<scopes>
		<include syntax="self" collection="comments" />
		<include syntax="self" collection="directives" />
		<include syntax="self" collection="values" />
	</scopes>
			
	<collections>
		<collection name="values">
			<include syntax="self" collection="strings" />
			<!-- TODO: add invalid strings support 
				<scope name="docker.values.invalid">
				<expression>^[^A-Z\n](.*)$</expression>
				<capture number="0" name="docker.body" />
			</scope> -->
		</collection>
	
		<!-- Strings -->
		<collection name="strings">
			<scope name="docker.string.double-quoted">
				<expression>&quot;(?:[^&quot;\\]|\\.)*(?:&quot;|$)</expression>
				<capture number="0" name="docker.string.quoted.double" />
			</scope>
			<scope name="docker.string.single-quoted">
				<expression>&apos;(?:[^&apos;\\]|\\.)*(?:&apos;|$)</expression>
				<capture number="0" name="docker.string.quoted.single" />
			</scope>
		</collection>
		
		<!-- Comments -->
		<collection name="comments">
			<scope name="docker.comment.single" spell-check="true">
				<expression>\#(.*)$</expression>
				<capture number="1" name="docker.comment.content" />
			</scope>
		</collection>
		
		<!-- Directives -->
		<collection name="directives">
		
			<!-- FROM -->
			<scope name="docker.directive.from">
				<expression>^\s*(?i:(from))\s+[^\s:@]+(?:[:@](\S+))?(?:\s+(?i:(as))\s+(\S+))?</expression>
				<capture number="1" name="docker.keyword" />
				<capture number="2" name="docker.entity.name.tag" />
				<capture number="3" name="docker.keyword" />
				<capture number="4" name="docker.variable.stage-name" />
				<subscopes>
					<include syntax="self" collection="comments" />
				</subscopes>					
			</scope>
		
			<!-- ONBUILD -->			
			<scope name="docker.directive.onbuild">
				<starts-with>
					<expression>^\s*(?i:(onbuild)\s+)?(?i:(add|arg|cmd|copy|entrypoint|env|expose|healthcheck|label|run|shell|stopsignal|user|volume|workdir))\s+</expression>
					<capture number="1" name="docker.keyword.control" />
					<capture number="2" name="docker.keyword.other.special-method" />
				</starts-with>
				<ends-with>
					<expression>$</expression>
				</ends-with>
					<subscopes>
						<include syntax="self" collection="values" />
						<include syntax="self" collection="comments" />
						<scope name="docker.directive.copy">
							<expression>(?i:copy)(?:\s+--from=(\S+))?</expression>
							<capture number="1" name="docker.variable.stage-name" />
							<subscopes>
								<include syntax="self" collection="values" />
								<include syntax="self" collection="comments" />
							</subscopes>
						</scope>
					</subscopes>
			</scope>
			
			<!-- Non ONBUILD -->
			<scope name="docker.directive.non_onbuild">
				<expression>^\s*(?i:(maintainer))</expression>
				<capture number="1" name="docker.keyword.control" />
			</scope>
			<subscopes>
				<include syntax="self" collection="values" />
			</subscopes>
		</collection>
	</collections>
</syntax>
